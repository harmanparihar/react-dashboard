{"ast":null,"code":"import _classCallCheck from \"/Users/harman/Documents/Term-3/Directed-Studies/Prototype/react-dashboard/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/harman/Documents/Term-3/Directed-Studies/Prototype/react-dashboard/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/harman/Documents/Term-3/Directed-Studies/Prototype/react-dashboard/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/harman/Documents/Term-3/Directed-Studies/Prototype/react-dashboard/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/harman/Documents/Term-3/Directed-Studies/Prototype/react-dashboard/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/harman/Documents/Term-3/Directed-Studies/Prototype/react-dashboard/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/harman/Documents/Term-3/Directed-Studies/Prototype/react-dashboard/src/Event.js\";\n//Including react\nimport React, { Component } from 'react'; //Including the react-fusioncharts component\n\nimport ReactDOM from 'react-dom'; //Including the fusioncharts library\n\nimport FusionCharts from 'fusioncharts'; //Including the chart type\n\nimport Chart from 'fusioncharts/fusioncharts.charts'; //Including react-fusioncharts component\n\nimport ReactFC from 'react-fusioncharts'; //Including the theme as fusion\n\nimport FusionTheme from 'fusioncharts/themes/fusioncharts.theme.fusion'; //Adding the chart as dependency to the core fusioncharts\n\nReactFC.fcRoot(FusionCharts, Chart, FusionTheme); //Creating the JSON object to store the chart configurations\n\nvar chartConfigs = {\n  type: 'column2d',\n  width: '500',\n  height: '400',\n  dataFormat: 'json',\n  dataSource: {\n    // Chart configuration\n    \"chart\": {\n      \"caption\": \"Countries With Most Oil Reserves [2017-18]\",\n      \"subCaption\": \"In MMbbl = One Million barrels\",\n      \"xAxisName\": \"Country\",\n      \"yAxisName\": \"Reserves (MMbbl)\",\n      \"numberSuffix\": \"K\",\n      \"theme\": \"fusion\"\n    },\n    // Chart data\n    \"data\": [{\n      \"label\": \"Venezuela\",\n      \"value\": \"290\"\n    }, {\n      \"label\": \"Saudi\",\n      \"value\": \"260\"\n    }, {\n      \"label\": \"Canada\",\n      \"value\": \"180\"\n    }, {\n      \"label\": \"Iran\",\n      \"value\": \"140\"\n    }, {\n      \"label\": \"Russia\",\n      \"value\": \"115\"\n    }, {\n      \"label\": \"UAE\",\n      \"value\": \"100\"\n    }, {\n      \"label\": \"US\",\n      \"value\": \"30\"\n    }, {\n      \"label\": \"China\",\n      \"value\": \"30\"\n    }]\n  }\n};\nvar defaultMessage = 'Click on the plot to see the value along with the label';\n\nvar Event =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Event, _Component);\n\n  function Event(props) {\n    var _this;\n\n    _classCallCheck(this, Event);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Event).call(this, props));\n    _this.state = {\n      message: '',\n      enabled: false\n    };\n    _this.trackPlotClick = _this.trackPlotClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.resetChart = _this.resetChart.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.dataPlotClick = _this.dataPlotClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } // Handler for 'Track Data Plot Clicks' button.\n  // 1. Adds an eventlistener for data plot cick on the chart\n  // 2. Sets the default message when data plot click tracking is enabled\n\n\n  _createClass(Event, [{\n    key: \"trackPlotClick\",\n    value: function trackPlotClick() {\n      FusionCharts.addEventListener('dataplotClick', this.dataPlotClick);\n      this.setState({\n        message: defaultMessage,\n        enabled: true\n      });\n    } // Event listener for dataplotclick event on chart. Update message with data plot values.\n\n  }, {\n    key: \"dataPlotClick\",\n    value: function dataPlotClick(eventObj, dataObj) {\n      this.setState({\n        message: ['You have clicked on plot ', React.createElement(\"strong\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }, dataObj.categoryLabel), ' whose value is ', React.createElement(\"strong\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }, dataObj.displayValue)]\n      });\n    } // Handler for 'Reset' button.\n    // Resets the chart to default message and removed the event listener.\n\n  }, {\n    key: \"resetChart\",\n    value: function resetChart() {\n      FusionCharts.removeEventListener('dataplotClick', this.dataPlotClick);\n      this.setState({\n        message: '',\n        enabled: false\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(ReactFC, Object.assign({}, chartConfigs, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        style: {\n          padding: '5px'\n        },\n        id: \"message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, this.state.message || 'Click the below buttons to add an event dynamically to a charts'), React.createElement(\"button\", {\n        className: \"btn btn-outline-secondary btn-sm\",\n        disabled: this.state.enabled,\n        onClick: this.trackPlotClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"Add/ listen to data plot click event\"), React.createElement(\"button\", {\n        className: \"btn btn-outline-secondary btn-sm\",\n        disabled: !this.state.enabled,\n        onClick: this.resetChart,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \"Remove data plot click event\"));\n    }\n  }]);\n\n  return Event;\n}(Component);\n\nexport default Event;","map":{"version":3,"sources":["/Users/harman/Documents/Term-3/Directed-Studies/Prototype/react-dashboard/src/Event.js"],"names":["React","Component","ReactDOM","FusionCharts","Chart","ReactFC","FusionTheme","fcRoot","chartConfigs","type","width","height","dataFormat","dataSource","defaultMessage","Event","props","state","message","enabled","trackPlotClick","bind","resetChart","dataPlotClick","addEventListener","setState","eventObj","dataObj","categoryLabel","displayValue","removeEventListener","padding"],"mappings":"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","sourcesContent":["//Including react\nimport React, { Component } from 'react';\n\n//Including the react-fusioncharts component\nimport ReactDOM from 'react-dom';\n\n//Including the fusioncharts library\nimport FusionCharts from 'fusioncharts';\n\n//Including the chart type\nimport Chart from 'fusioncharts/fusioncharts.charts';\n\n//Including react-fusioncharts component\nimport ReactFC from 'react-fusioncharts';\n\n//Including the theme as fusion\nimport FusionTheme from 'fusioncharts/themes/fusioncharts.theme.fusion';\n\n//Adding the chart as dependency to the core fusioncharts\nReactFC.fcRoot(FusionCharts, Chart, FusionTheme);\n\n//Creating the JSON object to store the chart configurations\n\nconst chartConfigs = {\n    type: 'column2d',\n    width: '500',\n    height: '400',\n    dataFormat: 'json',\n    dataSource: {\n        // Chart configuration\n        \"chart\": {\n            \"caption\": \"Countries With Most Oil Reserves [2017-18]\",\n            \"subCaption\": \"In MMbbl = One Million barrels\",\n            \"xAxisName\": \"Country\",\n            \"yAxisName\": \"Reserves (MMbbl)\",\n            \"numberSuffix\": \"K\",\n            \"theme\": \"fusion\"\n        },\n        // Chart data\n        \"data\": [{\n            \"label\": \"Venezuela\",\n            \"value\": \"290\"\n        }, {\n            \"label\": \"Saudi\",\n            \"value\": \"260\"\n        }, {\n            \"label\": \"Canada\",\n            \"value\": \"180\"\n        }, {\n            \"label\": \"Iran\",\n            \"value\": \"140\"\n        }, {\n            \"label\": \"Russia\",\n            \"value\": \"115\"\n        }, {\n            \"label\": \"UAE\",\n            \"value\": \"100\"\n        }, {\n            \"label\": \"US\",\n            \"value\": \"30\"\n        }, {\n            \"label\": \"China\",\n            \"value\": \"30\"\n        }]\n    },\n};\n\nvar defaultMessage = 'Click on the plot to see the value along with the label';\n\nclass Event extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n          message: '',\n          enabled: false\n        }\n\n        this.trackPlotClick = this.trackPlotClick.bind(this);\n        this.resetChart = this.resetChart.bind(this);\n        this.dataPlotClick = this.dataPlotClick.bind(this);\n    }\n\n    // Handler for 'Track Data Plot Clicks' button.\n    // 1. Adds an eventlistener for data plot cick on the chart\n    // 2. Sets the default message when data plot click tracking is enabled\n    trackPlotClick() {\n        FusionCharts.addEventListener('dataplotClick', this.dataPlotClick);\n        this.setState({\n            message: defaultMessage,\n            enabled: true\n        });\n      }\n\n    // Event listener for dataplotclick event on chart. Update message with data plot values.\n    dataPlotClick(eventObj, dataObj) {\n        this.setState({\n            message: [\n                'You have clicked on plot ',\n                <strong>{dataObj.categoryLabel}</strong>,\n                ' whose value is ',\n                <strong>{dataObj.displayValue}</strong>\n            ]\n        });\n    }\n\n    // Handler for 'Reset' button.\n    // Resets the chart to default message and removed the event listener.\n    resetChart() {\n    FusionCharts.removeEventListener('dataplotClick', this.dataPlotClick);\n        this.setState({\n            message: '',\n            enabled: false\n        });\n      }\n\n      render () {\n        return (\n          <div>\n            <ReactFC {...chartConfigs} />\n            <div style={{ padding: '5px' }} id=\"message\">\n              { this.state.message || 'Click the below buttons to add an event dynamically to a charts' }\n            </div>\n            <button\n              className='btn btn-outline-secondary btn-sm'\n              disabled={this.state.enabled}\n              onClick={this.trackPlotClick}\n            >\n              Add/ listen to data plot click event\n            </button>\n            <button\n              className='btn btn-outline-secondary btn-sm'\n              disabled={!this.state.enabled}\n              onClick={this.resetChart}\n            >\n              Remove data plot click event\n            </button>\n          </div>\n        )\n      }\n}\nexport default Event;\n"]},"metadata":{},"sourceType":"module"}